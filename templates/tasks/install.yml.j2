---

[% macro or_env_files_changed() -%]
[%- if cli_output.env_files -%]
[% for fn_id in cli_output.env_files.values() %] or [[ fn_id ]].changed[% endfor %]
[%- endif -%]
[% endmacro -%]

- name: Ensure deployment user for [[ cli_output['role_name'] ]]
  user:
    name: "{{ docker_deployment_user }}"
    state: "{{ [[ cli_output['defaults_prefix'] ]]state | default('present') }}"
    create_home: true
    uid: "{{ docker_deployment_user_id }}"
    shell: /bin/bash

- name: Ensure user is added to the docker group.
  user:
    name: "{{ docker_deployment_user }}"
    groups: docker
    append: true

- name: Ensure repository paths are present
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ docker_deployment_user }}"
    group: "{{ docker_deployment_user }}"
  become: true
  loop:
   - "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}"
   - "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/scripts"

- name: Ensure external network exists
  community.docker.docker_network:
    name: "{{ [[ cli_output['defaults_prefix'] ]]ext_net }}"
    driver: bridge
    attachable: true
    state: present

- name: Check if docker-compose.yml exists
  stat:
    path: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/docker-compose.yml"
  register: compose

- name: test docker-compose changed
  template:
    src: "docker-compose.yml"
    dest: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/docker-compose.yml"
    owner: "{{ docker_deployment_user }}"
    mode: "600"
  check_mode: true
  notify: [[ cli_output['defaults_prefix'] ]]service_stop
  when: compose.stat.exists

- meta: flush_handlers

- name: Copy docker-compose.yml
  template:
    src: "docker-compose.yml"
    dest: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/docker-compose.yml"
    owner: "{{ docker_deployment_user }}"
    group: "{{ docker_deployment_user }}"
    mode: "600"
[% set env_from_file = cli_output.defaults | rejectattr('env_file', 'eq', None) | list -%]
[% if env_from_file %]
[% for fn, service_defaults in env_from_file | groupby('env_file') %]

- name: Ensure parent folders for env files exists
  file:
    path: "{{ [[ cli_output['defaults_prefix'] ]]repository_src + '/' +  item | dirname }}"
    owner: "{{ docker_deployment_user }}"
    group: "{{ docker_deployment_user }}"
    state: directory
  loop: [[ cli_output.env_files | list | to_yaml ]]

- name: Render env file [[ fn ]]
  copy:
    dest: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/[[ fn ]]"
    owner: "{{ docker_deployment_user }}"
    group: "{{ docker_deployment_user }}"
    content: |
[% for data in service_defaults %]
      [[ data.original_key ]]="{{ [[ data.key ]] }}"
[% endfor %]
  notify: [[ cli_output['defaults_prefix'] ]]service_stop

[% endfor %]

- meta: flush_handlers

[%- endif %]

- include_tasks: run_cmds.yml
  vars:
    cmds: "{{ [[ cli_output['defaults_prefix'] ]]pre_startup_commands }}"
    remove_script: "{{ [[ cli_output['defaults_prefix'] ]]pre_startup_script_remove }}"
    script_content: "{{ [[ cli_output['defaults_prefix'] ]]pre_startup_script }}"
    script_name: pre_startup.sh
  when: [[ cli_output['defaults_prefix'] ]]state == 'present'

- name: legacy | Ensure services are {{ [[ cli_output['defaults_prefix'] ]]state }}
  community.docker.docker_compose:
    project_name: "{{ [[ cli_output['defaults_prefix'] ]]project_name }}"
    project_src: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}"
    debug: true
    state: "{{ [[ cli_output['defaults_prefix'] ]]state }}"
    build: false
    files:
      - docker-compose.yml
  become_user: "{{ docker_deployment_user }}"
  when:
    - compose_v1

# Requires community.docker >= 3.8.0. ansible-galaxy does not handle collection dependencies in roles meta/main.yml
- name: Ensure services are {{ [[ cli_output['defaults_prefix'] ]]state }}
  community.docker.docker_compose_v2:
    project_name: "{{ [[ cli_output['defaults_prefix'] ]]project_name }}"
    project_src: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}"
    state: "{{ [[ cli_output['defaults_prefix'] ]]state }}"
    files:
      - docker-compose.yml
  become_user: "{{ docker_deployment_user }}"
  when:
    - not compose_v1

- include_tasks: run_cmds.yml
  vars:
    cmds: "{{ [[ cli_output['defaults_prefix'] ]]post_startup_commands }}"
    remove_script: "{{ [[ cli_output['defaults_prefix'] ]]post_startup_script_remove }}"
    script_content: "{{ [[ cli_output['defaults_prefix'] ]]post_startup_script }}"
    script_name: post_startup.sh
  when: "{{ [[ cli_output['defaults_prefix'] ]]state == 'present' }}"

- name: Put auto-update script
  copy:
    content: |
      #!/usr/bin/env bash
      
      set -eu
      cd {{ [[ cli_output['defaults_prefix'] ]]repository_src }}
      docker compose pull
      docker compose up -d

    dest: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/autoupdate.sh"
    owner: "{{ docker_deployment_user }}"
    group: "{{ docker_deployment_user }}"
    mode: "770"
  when: [[ cli_output['defaults_prefix'] ]]auto_update

- name: Set auto-update cron to {{ cron_state }}
  cron:
    name: update all services for [[ cli_output['role_name'] ]]
    job: "{{ [[ cli_output['defaults_prefix'] ]]repository_src }}/autoupdate.sh"
    hour: "{{ [[ cli_output['defaults_prefix'] ]]auto_update_cron_hour }}"
    minute: "{{ [[ cli_output['defaults_prefix'] ]]auto_update_cron_minute }}"
    weekday: "{{ [[ cli_output['defaults_prefix'] ]]auto_update_cron_weekday }}"
    month: "{{ [[ cli_output['defaults_prefix'] ]]auto_update_cron_month }}"
    user: "{{ docker_deployment_user }}"
    state: "{{ cron_state }}"
  become_user: "{{ docker_deployment_user }}"
  vars:
    cron_state: "{{ 'present' if [[ cli_output['defaults_prefix'] ]]auto_update else 'absent' }}"
